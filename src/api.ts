/* tslint:disable */
/* eslint-disable */
/**
 * GEWISDB API
 * The GEWIS member database has a few available endpoints
 *
 * The version of the OpenAPI document: 86c08a87afe939cbb9a515f7063965f7bdb30bce
 * Contact: abc@gewis.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Get403Response
 */
export interface Get403Response {
    /**
     * 
     * @type {string}
     * @memberof Get403Response
     */
    'status'?: string;
    /**
     * 
     * @type {Get403ResponseError}
     * @memberof Get403Response
     */
    'error'?: Get403ResponseError;
}
/**
 * 
 * @export
 * @interface Get403ResponseError
 */
export interface Get403ResponseError {
    /**
     * 
     * @type {string}
     * @memberof Get403ResponseError
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Get403ResponseError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Health
 */
export interface Health {
    /**
     * 
     * @type {boolean}
     * @memberof Health
     */
    'healthy'?: boolean;
}
/**
 * @type Member
 * If the client holds the `OrgansMembershipR` or `MemberProperty*` permissions, a (combination of) MemberExtended object(s), else MemberSimple
 * @export
 */
export type Member = MemberExtendedBirthDate | MemberExtendedEmail | MemberExtendedKeyholder | MemberExtendedOrgan | MemberExtendedType | MemberSimple;

/**
 * 
 * @export
 * @interface MemberExtendedBirthDate
 */
export interface MemberExtendedBirthDate {
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedBirthDate
     */
    'lidnr': number;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'initials'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'given_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'family_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedBirthDate
     */
    'generation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'expiration'?: string;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'birthdate'?: string;
    /**
     * Whether the member is at least 16 years old
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'is_16_plus'?: boolean;
    /**
     * Whether the member is at least 18 years old
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'is_18_plus'?: boolean;
    /**
     * Whether the member is at least 21 years old
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'is_21_plus'?: boolean;
}
/**
 * 
 * @export
 * @interface MemberExtendedEmail
 */
export interface MemberExtendedEmail {
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedEmail
     */
    'lidnr': number;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'initials'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'given_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'family_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedEmail
     */
    'generation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedEmail
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedEmail
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'expiration'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'email'?: string | null;
}
/**
 * 
 * @export
 * @interface MemberExtendedKeyholder
 */
export interface MemberExtendedKeyholder {
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedKeyholder
     */
    'lidnr': number;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'initials'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'given_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'family_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedKeyholder
     */
    'generation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedKeyholder
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedKeyholder
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'expiration'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedKeyholder
     */
    'keyholder'?: boolean;
}
/**
 * 
 * @export
 * @interface MemberExtendedOrgan
 */
export interface MemberExtendedOrgan {
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedOrgan
     */
    'lidnr': number;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'initials'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'given_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'family_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedOrgan
     */
    'generation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedOrgan
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedOrgan
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'expiration'?: string;
    /**
     * 
     * @type {Array<OrganMembership>}
     * @memberof MemberExtendedOrgan
     */
    'organs'?: Array<OrganMembership> | null;
}
/**
 * 
 * @export
 * @interface MemberExtendedType
 */
export interface MemberExtendedType {
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedType
     */
    'lidnr': number;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedType
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedType
     */
    'initials'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedType
     */
    'given_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedType
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedType
     */
    'family_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberExtendedType
     */
    'generation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedType
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberExtendedType
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedType
     */
    'expiration'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberExtendedType
     */
    'membership_type'?: MemberExtendedTypeMembershipTypeEnum;
}

export const MemberExtendedTypeMembershipTypeEnum = {
    Ordinary: 'ordinary',
    External: 'external',
    Graduate: 'graduate',
    Honorary: 'honorary'
} as const;

export type MemberExtendedTypeMembershipTypeEnum = typeof MemberExtendedTypeMembershipTypeEnum[keyof typeof MemberExtendedTypeMembershipTypeEnum];

/**
 * 
 * @export
 * @interface MemberSimple
 */
export interface MemberSimple {
    /**
     * 
     * @type {number}
     * @memberof MemberSimple
     */
    'lidnr': number;
    /**
     * 
     * @type {string}
     * @memberof MemberSimple
     */
    'full_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberSimple
     */
    'initials'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberSimple
     */
    'given_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberSimple
     */
    'middle_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MemberSimple
     */
    'family_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof MemberSimple
     */
    'generation'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MemberSimple
     */
    'hidden'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MemberSimple
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberSimple
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface MembersGet200Response
 */
export interface MembersGet200Response {
    /**
     * 
     * @type {Array<Member>}
     * @memberof MembersGet200Response
     */
    'data'?: Array<Member>;
}
/**
 * 
 * @export
 * @interface MembersLidnrGet200Response
 */
export interface MembersLidnrGet200Response {
    /**
     * 
     * @type {MemberSimple}
     * @memberof MembersLidnrGet200Response
     */
    'data'?: MemberSimple;
}
/**
 * 
 * @export
 * @interface Organ
 */
export interface Organ {
    /**
     * 
     * @type {number}
     * @memberof Organ
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Organ
     */
    'abbreviation'?: string;
}
/**
 * 
 * @export
 * @interface OrganMembership
 */
export interface OrganMembership {
    /**
     * 
     * @type {Organ}
     * @memberof OrganMembership
     */
    'organ'?: Organ;
    /**
     * 
     * @type {string}
     * @memberof OrganMembership
     */
    'function'?: string;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof OrganMembership
     */
    'installDate'?: string;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof OrganMembership
     */
    'dischargeDate'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof OrganMembership
     */
    'current'?: boolean;
}

/**
 * BasicApi - axios parameter creator
 * @export
 */
export const BasicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint will return the health status of the API
         * @summary Health endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicApi - functional programming interface
 * @export
 */
export const BasicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint will return the health status of the API
         * @summary Health endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Health>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BasicApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BasicApi - factory interface
 * @export
 */
export const BasicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicApiFp(configuration)
    return {
        /**
         * This endpoint will return the health status of the API
         * @summary Health endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<Health> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BasicApi - object-oriented interface
 * @export
 * @class BasicApi
 * @extends {BaseAPI}
 */
export class BasicApi extends BaseAPI {
    /**
     * This endpoint will return the health status of the API
     * @summary Health endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return BasicApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all members that are currently installed in at least one organ
         * @summary Get active members
         * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersActiveGet: async (includeInactive?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeInactive !== undefined) {
                localVarQueryParameter['includeInactive'] = includeInactive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all members
         * @summary Get members
         * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGet: async (includeOrgans?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeOrgans !== undefined) {
                localVarQueryParameter['includeOrgans'] = includeOrgans;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific member
         * @summary Get a member
         * @param {number} lidnr 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLidnrGet: async (lidnr: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lidnr' is not null or undefined
            assertParamExists('membersLidnrGet', 'lidnr', lidnr)
            const localVarPath = `/members/{lidnr}`
                .replace(`{${"lidnr"}}`, encodeURIComponent(String(lidnr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all members that are currently installed in at least one organ
         * @summary Get active members
         * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersActiveGet(includeInactive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersActiveGet(includeInactive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.membersActiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all members
         * @summary Get members
         * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersGet(includeOrgans?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersGet(includeOrgans, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.membersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific member
         * @summary Get a member
         * @param {number} lidnr 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async membersLidnrGet(lidnr: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersLidnrGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.membersLidnrGet(lidnr, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.membersLidnrGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * Get all members that are currently installed in at least one organ
         * @summary Get active members
         * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersActiveGet(includeInactive?: boolean, options?: any): AxiosPromise<MembersGet200Response> {
            return localVarFp.membersActiveGet(includeInactive, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all members
         * @summary Get members
         * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGet(includeOrgans?: boolean, options?: any): AxiosPromise<MembersGet200Response> {
            return localVarFp.membersGet(includeOrgans, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific member
         * @summary Get a member
         * @param {number} lidnr 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLidnrGet(lidnr: number, options?: any): AxiosPromise<MembersLidnrGet200Response> {
            return localVarFp.membersLidnrGet(lidnr, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * Get all members that are currently installed in at least one organ
     * @summary Get active members
     * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public membersActiveGet(includeInactive?: boolean, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).membersActiveGet(includeInactive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all members
     * @summary Get members
     * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public membersGet(includeOrgans?: boolean, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).membersGet(includeOrgans, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific member
     * @summary Get a member
     * @param {number} lidnr 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public membersLidnrGet(lidnr: number, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).membersLidnrGet(lidnr, options).then((request) => request(this.axios, this.basePath));
    }
}



