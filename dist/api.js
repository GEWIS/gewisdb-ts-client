"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * GEWISDB API
 * The GEWIS member database has a few available endpoints
 *
 * The version of the OpenAPI document: 86c08a87afe939cbb9a515f7063965f7bdb30bce
 * Contact: abc@gewis.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MembersApi = exports.MembersApiFactory = exports.MembersApiFp = exports.MembersApiAxiosParamCreator = exports.BasicApi = exports.BasicApiFactory = exports.BasicApiFp = exports.BasicApiAxiosParamCreator = exports.MemberExtendedTypeMembershipTypeEnum = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.MemberExtendedTypeMembershipTypeEnum = {
    Ordinary: 'ordinary',
    External: 'external',
    Graduate: 'graduate',
    Honorary: 'honorary'
};
/**
 * BasicApi - axios parameter creator
 * @export
 */
const BasicApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint will return the health status of the API
         * @summary Health endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_auth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.BasicApiAxiosParamCreator = BasicApiAxiosParamCreator;
/**
 * BasicApi - functional programming interface
 * @export
 */
const BasicApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BasicApiAxiosParamCreator)(configuration);
    return {
        /**
         * This endpoint will return the health status of the API
         * @summary Health endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rootGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['BasicApi.rootGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.BasicApiFp = BasicApiFp;
/**
 * BasicApi - factory interface
 * @export
 */
const BasicApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BasicApiFp)(configuration);
    return {
        /**
         * This endpoint will return the health status of the API
         * @summary Health endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options) {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};
exports.BasicApiFactory = BasicApiFactory;
/**
 * BasicApi - object-oriented interface
 * @export
 * @class BasicApi
 * @extends {BaseAPI}
 */
class BasicApi extends base_1.BaseAPI {
    /**
     * This endpoint will return the health status of the API
     * @summary Health endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    rootGet(options) {
        return (0, exports.BasicApiFp)(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.BasicApi = BasicApi;
/**
 * MembersApi - axios parameter creator
 * @export
 */
const MembersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get all members that are currently installed in at least one organ
         * @summary Get active members
         * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersActiveGet: (includeInactive, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/members/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_auth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (includeInactive !== undefined) {
                localVarQueryParameter['includeInactive'] = includeInactive;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get all members
         * @summary Get members
         * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGet: (includeOrgans, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_auth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (includeOrgans !== undefined) {
                localVarQueryParameter['includeOrgans'] = includeOrgans;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Get a specific member
         * @summary Get a member
         * @param {number} lidnr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLidnrGet: (lidnr, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'lidnr' is not null or undefined
            (0, common_1.assertParamExists)('membersLidnrGet', 'lidnr', lidnr);
            const localVarPath = `/members/{lidnr}`
                .replace(`{${"lidnr"}}`, encodeURIComponent(String(lidnr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_auth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MembersApiAxiosParamCreator = MembersApiAxiosParamCreator;
/**
 * MembersApi - functional programming interface
 * @export
 */
const MembersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MembersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get all members that are currently installed in at least one organ
         * @summary Get active members
         * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersActiveGet(includeInactive, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersActiveGet(includeInactive, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MembersApi.membersActiveGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get all members
         * @summary Get members
         * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGet(includeOrgans, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersGet(includeOrgans, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MembersApi.membersGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Get a specific member
         * @summary Get a member
         * @param {number} lidnr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLidnrGet(lidnr, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.membersLidnrGet(lidnr, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MembersApi.membersLidnrGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.MembersApiFp = MembersApiFp;
/**
 * MembersApi - factory interface
 * @export
 */
const MembersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MembersApiFp)(configuration);
    return {
        /**
         * Get all members that are currently installed in at least one organ
         * @summary Get active members
         * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersActiveGet(includeInactive, options) {
            return localVarFp.membersActiveGet(includeInactive, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all members
         * @summary Get members
         * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersGet(includeOrgans, options) {
            return localVarFp.membersGet(includeOrgans, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific member
         * @summary Get a member
         * @param {number} lidnr
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        membersLidnrGet(lidnr, options) {
            return localVarFp.membersLidnrGet(lidnr, options).then((request) => request(axios, basePath));
        },
    };
};
exports.MembersApiFactory = MembersApiFactory;
/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
class MembersApi extends base_1.BaseAPI {
    /**
     * Get all members that are currently installed in at least one organ
     * @summary Get active members
     * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    membersActiveGet(includeInactive, options) {
        return (0, exports.MembersApiFp)(this.configuration).membersActiveGet(includeInactive, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all members
     * @summary Get members
     * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    membersGet(includeOrgans, options) {
        return (0, exports.MembersApiFp)(this.configuration).membersGet(includeOrgans, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific member
     * @summary Get a member
     * @param {number} lidnr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    membersLidnrGet(lidnr, options) {
        return (0, exports.MembersApiFp)(this.configuration).membersLidnrGet(lidnr, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MembersApi = MembersApi;
//# sourceMappingURL=api.js.map