/**
 * GEWISDB API
 * The GEWIS member database has a few available endpoints
 *
 * The version of the OpenAPI document: 86c08a87afe939cbb9a515f7063965f7bdb30bce
 * Contact: abc@gewis.nl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface Get403Response
 */
export interface Get403Response {
    /**
     *
     * @type {string}
     * @memberof Get403Response
     */
    'status'?: string;
    /**
     *
     * @type {Get403ResponseError}
     * @memberof Get403Response
     */
    'error'?: Get403ResponseError;
}
/**
 *
 * @export
 * @interface Get403ResponseError
 */
export interface Get403ResponseError {
    /**
     *
     * @type {string}
     * @memberof Get403ResponseError
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof Get403ResponseError
     */
    'message'?: string;
}
/**
 *
 * @export
 * @interface Health
 */
export interface Health {
    /**
     *
     * @type {boolean}
     * @memberof Health
     */
    'healthy'?: boolean;
}
/**
 * @type Member
 * If the client holds the `OrgansMembershipR` or `MemberProperty*` permissions, a (combination of) MemberExtended object(s), else MemberSimple
 * @export
 */
export type Member = MemberExtendedBirthDate | MemberExtendedEmail | MemberExtendedKeyholder | MemberExtendedOrgan | MemberExtendedType | MemberSimple;
/**
 *
 * @export
 * @interface MemberExtendedBirthDate
 */
export interface MemberExtendedBirthDate {
    /**
     *
     * @type {number}
     * @memberof MemberExtendedBirthDate
     */
    'lidnr': number;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'full_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'initials'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'family_name'?: string;
    /**
     *
     * @type {number}
     * @memberof MemberExtendedBirthDate
     */
    'generation'?: number;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'hidden'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'expiration'?: string;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedBirthDate
     */
    'birthdate'?: string;
    /**
     * Whether the member is at least 16 years old
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'is_16_plus'?: boolean;
    /**
     * Whether the member is at least 18 years old
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'is_18_plus'?: boolean;
    /**
     * Whether the member is at least 21 years old
     * @type {boolean}
     * @memberof MemberExtendedBirthDate
     */
    'is_21_plus'?: boolean;
}
/**
 *
 * @export
 * @interface MemberExtendedEmail
 */
export interface MemberExtendedEmail {
    /**
     *
     * @type {number}
     * @memberof MemberExtendedEmail
     */
    'lidnr': number;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'full_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'initials'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'family_name'?: string;
    /**
     *
     * @type {number}
     * @memberof MemberExtendedEmail
     */
    'generation'?: number;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedEmail
     */
    'hidden'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedEmail
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'expiration'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedEmail
     */
    'email'?: string | null;
}
/**
 *
 * @export
 * @interface MemberExtendedKeyholder
 */
export interface MemberExtendedKeyholder {
    /**
     *
     * @type {number}
     * @memberof MemberExtendedKeyholder
     */
    'lidnr': number;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'full_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'initials'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'family_name'?: string;
    /**
     *
     * @type {number}
     * @memberof MemberExtendedKeyholder
     */
    'generation'?: number;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedKeyholder
     */
    'hidden'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedKeyholder
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedKeyholder
     */
    'expiration'?: string;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedKeyholder
     */
    'keyholder'?: boolean;
}
/**
 *
 * @export
 * @interface MemberExtendedOrgan
 */
export interface MemberExtendedOrgan {
    /**
     *
     * @type {number}
     * @memberof MemberExtendedOrgan
     */
    'lidnr': number;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'full_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'initials'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'family_name'?: string;
    /**
     *
     * @type {number}
     * @memberof MemberExtendedOrgan
     */
    'generation'?: number;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedOrgan
     */
    'hidden'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedOrgan
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedOrgan
     */
    'expiration'?: string;
    /**
     *
     * @type {Array<OrganMembership>}
     * @memberof MemberExtendedOrgan
     */
    'organs'?: Array<OrganMembership> | null;
}
/**
 *
 * @export
 * @interface MemberExtendedType
 */
export interface MemberExtendedType {
    /**
     *
     * @type {number}
     * @memberof MemberExtendedType
     */
    'lidnr': number;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedType
     */
    'full_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedType
     */
    'initials'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedType
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedType
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedType
     */
    'family_name'?: string;
    /**
     *
     * @type {number}
     * @memberof MemberExtendedType
     */
    'generation'?: number;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedType
     */
    'hidden'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MemberExtendedType
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberExtendedType
     */
    'expiration'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberExtendedType
     */
    'membership_type'?: MemberExtendedTypeMembershipTypeEnum;
}
export declare const MemberExtendedTypeMembershipTypeEnum: {
    readonly Ordinary: "ordinary";
    readonly External: "external";
    readonly Graduate: "graduate";
    readonly Honorary: "honorary";
};
export type MemberExtendedTypeMembershipTypeEnum = typeof MemberExtendedTypeMembershipTypeEnum[keyof typeof MemberExtendedTypeMembershipTypeEnum];
/**
 *
 * @export
 * @interface MemberSimple
 */
export interface MemberSimple {
    /**
     *
     * @type {number}
     * @memberof MemberSimple
     */
    'lidnr': number;
    /**
     *
     * @type {string}
     * @memberof MemberSimple
     */
    'full_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberSimple
     */
    'initials'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberSimple
     */
    'given_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberSimple
     */
    'middle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof MemberSimple
     */
    'family_name'?: string;
    /**
     *
     * @type {number}
     * @memberof MemberSimple
     */
    'generation'?: number;
    /**
     *
     * @type {boolean}
     * @memberof MemberSimple
     */
    'hidden'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MemberSimple
     */
    'deleted'?: boolean;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof MemberSimple
     */
    'expiration'?: string;
}
/**
 *
 * @export
 * @interface MembersGet200Response
 */
export interface MembersGet200Response {
    /**
     *
     * @type {Array<Member>}
     * @memberof MembersGet200Response
     */
    'data'?: Array<Member>;
}
/**
 *
 * @export
 * @interface MembersLidnrGet200Response
 */
export interface MembersLidnrGet200Response {
    /**
     *
     * @type {MemberSimple}
     * @memberof MembersLidnrGet200Response
     */
    'data'?: MemberSimple;
}
/**
 *
 * @export
 * @interface Organ
 */
export interface Organ {
    /**
     *
     * @type {number}
     * @memberof Organ
     */
    'id'?: number;
    /**
     *
     * @type {string}
     * @memberof Organ
     */
    'abbreviation'?: string;
}
/**
 *
 * @export
 * @interface OrganMembership
 */
export interface OrganMembership {
    /**
     *
     * @type {Organ}
     * @memberof OrganMembership
     */
    'organ'?: Organ;
    /**
     *
     * @type {string}
     * @memberof OrganMembership
     */
    'function'?: string;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof OrganMembership
     */
    'installDate'?: string;
    /**
     * Date in the Y-m-d\\TH:i:sP format
     * @type {string}
     * @memberof OrganMembership
     */
    'dischargeDate'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof OrganMembership
     */
    'current'?: boolean;
}
/**
 * BasicApi - axios parameter creator
 * @export
 */
export declare const BasicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * This endpoint will return the health status of the API
     * @summary Health endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BasicApi - functional programming interface
 * @export
 */
export declare const BasicApiFp: (configuration?: Configuration) => {
    /**
     * This endpoint will return the health status of the API
     * @summary Health endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Health>>;
};
/**
 * BasicApi - factory interface
 * @export
 */
export declare const BasicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * This endpoint will return the health status of the API
     * @summary Health endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet(options?: any): AxiosPromise<Health>;
};
/**
 * BasicApi - object-oriented interface
 * @export
 * @class BasicApi
 * @extends {BaseAPI}
 */
export declare class BasicApi extends BaseAPI {
    /**
     * This endpoint will return the health status of the API
     * @summary Health endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicApi
     */
    rootGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Health, any>>;
}
/**
 * MembersApi - axios parameter creator
 * @export
 */
export declare const MembersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get all members that are currently installed in at least one organ
     * @summary Get active members
     * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersActiveGet: (includeInactive?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all members
     * @summary Get members
     * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersGet: (includeOrgans?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific member
     * @summary Get a member
     * @param {number} lidnr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersLidnrGet: (lidnr: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * MembersApi - functional programming interface
 * @export
 */
export declare const MembersApiFp: (configuration?: Configuration) => {
    /**
     * Get all members that are currently installed in at least one organ
     * @summary Get active members
     * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersActiveGet(includeInactive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersGet200Response>>;
    /**
     * Get all members
     * @summary Get members
     * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersGet(includeOrgans?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersGet200Response>>;
    /**
     * Get a specific member
     * @summary Get a member
     * @param {number} lidnr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersLidnrGet(lidnr: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembersLidnrGet200Response>>;
};
/**
 * MembersApi - factory interface
 * @export
 */
export declare const MembersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get all members that are currently installed in at least one organ
     * @summary Get active members
     * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersActiveGet(includeInactive?: boolean, options?: any): AxiosPromise<MembersGet200Response>;
    /**
     * Get all members
     * @summary Get members
     * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersGet(includeOrgans?: boolean, options?: any): AxiosPromise<MembersGet200Response>;
    /**
     * Get a specific member
     * @summary Get a member
     * @param {number} lidnr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    membersLidnrGet(lidnr: number, options?: any): AxiosPromise<MembersLidnrGet200Response>;
};
/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export declare class MembersApi extends BaseAPI {
    /**
     * Get all members that are currently installed in at least one organ
     * @summary Get active members
     * @param {boolean} [includeInactive] Whether to include inactive fraternity members in the response. If a member is both an active member in another type and inactive in a fraternity, they also get returned (including possibly their inactive organ memberships).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    membersActiveGet(includeInactive?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MembersGet200Response, any>>;
    /**
     * Get all members
     * @summary Get members
     * @param {boolean} [includeOrgans] Whether to include organ memberships in the response. By default, organs are not included due to rather long computation time.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    membersGet(includeOrgans?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MembersGet200Response, any>>;
    /**
     * Get a specific member
     * @summary Get a member
     * @param {number} lidnr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    membersLidnrGet(lidnr: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MembersLidnrGet200Response, any>>;
}
